
Startup
=======

view {file}  - open {file} in read-only mode (s.a. vim -R)
gvim {file}  - start the GUI and edit {file} (s.a. vim -g)
gview {file} - start the GUI and open {file} in read-only mode (s.a. vim -Rg)
vimdiff      - start in diff mode (s.a. vim -d)
gvimdiff     - start GUI in diff mode (s.a. vim -dg)

other options
-------------

+{num}  - set the cursor on the first character of line {num}
+/{pattern} - set the cursor on the first character of the line containing {pattern}
-r      - recovery mode
-R      - read-only mode
-b      - binary mode
-n      - no swap file
-d      - diff mode
-o{num} - open {num} windows, split horizontally; if {num} is not listed open
          one window for every provided file
-O{num} - open {num} windows, split vertically
-p{num} - open {num} tab pages
-x      - encrypt the file on read/write



Basic Editing
=============

a  - Append at cursor
A  - Append to end of line (s.a. $a)
i  - Insert at cursor
I  - Insert at beginning of line (s.a. ^i)
s  - Substitute at cursor (s.a. xi)
S  - Substitute line (s.a. ^C)
o  - Open a new line below the current line (s.a. A<CR>)
O  - Open a new line above the current line (s.a. kA<CR> or ko)
x  - Delete character under cursor
X  - Delete character before cursor (s.a. hx) 

<C-h> - Delete back one character (s.a. backspace)
<C-w> - Delete back one word
<C-u> - Delete back to start of line

Motions
=======

ge    - go backwards to end of previous word
gE    - go backwards to the end of previous WORD

[[ / ]] - go to start of previous/next section (function block)
[] / ][ - go to end of previous/next section (function block)

[/ / ]/ - go to start/end of a C comment

{N}gg - to line {N}; to line 1 if {N} is not specified
{N}G  - to line {N}; to end of file if {N} is not specified

Operators (Operator + Motion = Action)
======================================

d{motion} - Delete
c{motion} - Change
y{motion} - Yank

note: operator + operator = action applied to current line
  (e.g. dd - delete current line)

Searching
=========

f{char} - Find next instance of {char} in current line
  ; - repeat / , - repeat in opposite direction

/{pattern} / ?{pattern} - search forward/backwards for {pattern}
n               - repeat last '/' or '?' search
N               - repeat last '/' or '?' search in opposite direction
* / #           - search forward/backwards for word under the cursor
g* / g#         - like '*' or '#' but finds matches that aren't whole words
gd / gD         - goto local/global declaration of variable under the cursor
1gd / 1gD       - like 'gd' or 'gD' but ignore matches inside a {} block that
                  ends before the cursor position

Lookup
======

[d / [D  - list first/all defines found in current and included files matching
           the word under the cursor
[i / [I  - list first/all lines found in current and included files matching
           the word under the cursor

[<C-D> - jump to first #define found in current and included files matching
         word under the cursor
[<C-I> - jump to first line in current and included files matching word under
         the cursor

Repeating
=========

.  - Repeat last change
@: - Repeat last Ex command
&  - Repeat last :substitute

Text Objects (Operator + Text Object = Action)
==============================================

a[keyword] - "a [keyword]"
             select text specified by [keyword] including leading and trailing
             delimiters (e.g. whitespace, '[' and ']', '(' and ')', etc.)
i[keyword] - "inner [keyword]"
             select text specified by [keyword] excluding delimters

note: if not currently in a valid block vim will search the current line for
      the next instance of the block

keywords
--------
w, W    - word or WORD
s       - sentance
p       - paragraph
[, ]    - [] block
b, (, ) - () block
<, >    - <> block
t       - tag block (e.g. <aaa>inner text</aaa>)
B, {, } - a {} block (e.g. { int i; for (i=0; i<2; ) }
"       - double quote string (e.g. "this is a 'double-quote' string")
'       - single quote sting
`       - back-quote string

Visual Selections
=================

v     - select by character
V     - select by line
<C-v> - select by block

gv    - reselect previous visual area


Window Management
=================

<C-w>s - split the current window horizontally, reusing the current buffer
            in the new window
<C-w>v - split the current window vertically, reusing the current buffer in
            the new window
:sp[lit] {file} - split the current window hoizontatally, loading {file} into
                  the new window
:vsp[lit] {file} - split the current window veritcally, loading {file} into
                   the new window

<C-w>w - cycle between open windows
<C-w>h - focus the window on the left
<C-w>l - focus the window on the right
<C-w>j - focus the window below
<C-w>k - focus the window above

note: <C-w><C-w> is the same as <C-w>w, etc

<C-w>c - close the active window  (s.a. :cl[ose])
<C-w>o - keep only the active window, closing all others  (s.a. :on[ly])

<C-w>+ / <C-w>- - increase/decrease current window height
<C-w>> / <C-w>< - increase/decrease current window width
<C-w>=          - equalize width and height of all windows
<C-w>_ / <C-w>| - maximize height/width of the active window
[N]<C-w>_ - set the active window height to [N] rows
[N]>C-w>| - set the active window width to [N] rows


Tab Managment
=============

:tabe[dit] {filename} - open {filename} in a new tab
<C-w>T - move the current window into its own tab
:tabc[lose] - close the current tab page and all of its windows
:tabo[nly] - keep the active tab page, closing all others

:tabn[ext] {N} - switch to tab page number {N} (s.a. {N}gt)
:tabn[ext]     - switch to next tab page (goto tab) (s.a. gt)
:tabp[revious] - switch to previous tabl page (s.a. gT)


Plugins
=======

* the 'runtimepath' option contains a set of directories vim will search
  for the 'plugin' subdirectory.

default runtimepath:
  ~/.vim
  /var/lib/vim/addons
  /usr/share/vim/vimfiles
  /usr/share/vim/vim73
  /usr/share/vim/vimfiles/after
  /var/lib/vim/addons
  ~/.vim/after

* all files ending in .vim will be sourced in alphabetical order per
  directory.

:runtime! plugin/**/*.vim - load plugins


Etc
===

Arithmetic
==========

<C-a> / <C-x> - perform addition / subtraction on the next number on the line
the count is 22
{number}<C-a> - add {number} to the next number
